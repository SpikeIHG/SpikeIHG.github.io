<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MARKDOWN</title>
    <url>/2023/03/22/MARKDOWN-0/</url>
    <content><![CDATA[<h2 id="本文总结一些学习到的Markdown语法以及相关工具"><a href="#本文总结一些学习到的Markdown语法以及相关工具" class="headerlink" title="本文总结一些学习到的Markdown语法以及相关工具"></a>本文总结一些学习到的Markdown语法以及相关工具</h2><ol>
<li><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol>
<li><h4 id="标题设置"><a href="#标题设置" class="headerlink" title="标题设置"></a>标题设置</h4><ul>
<li><em>等级标题</em><br> # ## ### 类似的一共有六级 数量不同代表不同的大小</li>
</ul>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></li>
<li><h4 id="斜体（Italic）"><a href="#斜体（Italic）" class="headerlink" title="斜体（Italic）"></a><em>斜体（Italic）</em></h4><p> 应该有很多种 ，不过较为普适的是*单词* 例子</p>
<h2 id="这是一个例子"><a href="#这是一个例子" class="headerlink" title="这是一个例子"></a><em>这是一个例子</em></h2></li>
<li><h4 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a><strong>粗体</strong></h4><p> 普适的**单词**</p>
<h2 id="这是一个例子-但是实际上每个标题都默认了"><a href="#这是一个例子-但是实际上每个标题都默认了" class="headerlink" title="这是一个例子  但是实际上每个标题都默认了"></a><strong>这是一个例子</strong>  但是实际上每个标题都默认了</h2></li>
<li><h4 id="又粗又斜"><a href="#又粗又斜" class="headerlink" title="又粗又斜"></a><em><strong>又粗又斜</strong></em></h4><p> ***单词*** 注意上面的都是紧紧挨着单词的 </p>
</li>
<li><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p> \ 类似其他的语言 直接 一个反斜杠</p>
</li>
<li><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><ol>
<li>可以先敲两个空格之后 然后换行</li>
<li>可以用 &lt;br&gt;</li>
<li>我在Vscode 和 typora 似乎可以直接换行啊</li>
</ol>
</li>
</ol>
<ol start="7">
<li><h4 id="其他几种格式"><a href="#其他几种格式" class="headerlink" title="其他几种格式"></a>其他几种格式</h4><ol>
<li>分割线 *** ___ — 至少三个<br> 举个例子</li>
</ol>
<hr>
<hr>
<hr>
<h3 id="三个效果好像一样"><a href="#三个效果好像一样" class="headerlink" title="三个效果好像一样"></a>三个效果好像一样</h3><ol>
<li>删除线<br> 两个~~单词~~<br> <del>Winter</del></li>
<li>下划线<br> 用的html语法 就是&lt;u&gt;&lt;&#x2F;u&gt;  <em><strong>注意是一个斜杠</strong></em><br> 举个例子 <u>For Ms.Winter</u></li>
</ol>
</li>
</ol>
<ol start="8">
<li><h3 id="——引用与序表"><a href="#——引用与序表" class="headerlink" title="——引用与序表"></a>——引用与序表</h3><pre><code> 引用（为什么已经引用了？？？）
</code></pre>
<ol>
<li>引用<br> （不明所以啊）看一看啊&gt; &gt;&gt; 类似的 举个例子    <blockquote>
<p>你好啊 你们逗号吗</p>
<blockquote>
<p>我很好</p>
<blockquote>
<p>真的吗   </p>
</blockquote>
</blockquote>
</blockquote>
</li>
<li>有序列表<br> 就是我现在写的这些数字标号 注意要隔开<br> 举个例子    <ol>
<li>好<ol>
<li>好<ol>
<li>好 似乎最多只有三级  每次tab一下就可以自动升级或者降级</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>无序列表<br>   - 使用这个符号<br>   举个例子 <ul>
<li>好 好 好 好<ul>
<li>好</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><h3 id="重新实验"><a href="#重新实验" class="headerlink" title="重新实验"></a>重新实验</h3><pre><code> 你好 哦 我懂了 如果在有序表之后再两个tab 就可以有这样一个块
</code></pre>
</li>
</ol>
</li>
<li><h4 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h4><pre><code>你啥感觉卡斯柯估计是客观的就卡死了干净ask房间昆仑山感觉

阿贾克斯打个卡速度过快发生你的开发代码 ***似乎没什么用***
</code></pre>
<ol start="11">
<li><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">void</span>)</span>:</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line">    <span class="type">int</span> a=<span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>就是使用```cpp &#96;&#96;&#96;哇好厉害啊</p>
</li>
<li><h4 id="空格表示"><a href="#空格表示" class="headerlink" title="空格表示"></a>空格表示</h4><p>这个有点有趣 $~~~~$ 可以指定任意个数的</p>
</li>
<li><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><ol>
<li><em>超链接</em><br>使用&lt;&gt; 直接写一个地址就可以     同样可以使用邮箱地址<br><a class="link"   href="https://www.w3school.com.cn/" >https://www.w3school.com.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><em>引用式超链接</em><ol>
<li>  <a class="link"   href="https://www.w3school.com.cn/" >link1djfj <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ol>
</li>
<li><em>设定文字的超链接</em></li>
</ol>
<pre><code> 1.  使用\[显示名字](url)
</code></pre>
</li>
</ol>
<p>   <a class="link"   href="https://www.w3school.com.cn/" >这里是一个链接地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 也可以是一个文件路<br>          2.  <em>带有一个titile</em><br>  所谓的title就是悬停再链接上会显示的文字 举个例子 放在()里 url用空格相连 这是一个链接<a class="link"   href="https://www.w3school.com.cn/"  title="Look at you">Look at me <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>    &#x2F;&#x2F;感觉还是挺方便的<br>        3. <em>带有格式化的链接</em><br>  <strong><a class="link"   href="https://www.w3school.com.cn/" >hello <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong><br>  <em><a class="link"   href="https://www.w3school.com.cn/" >hello <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em><br>  <em><strong><a class="link"   href="https://www.w3school.com.cn/" >hello <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></em><br>   <a href="https://www.w3school.com.cn/" title="Hello,World"><code>hello</code></a><br>  注意最后一个 是[`word`](url &quot;title&quot;) 的写法<br>        4. <em>引用式链接</em><br>   大概就是 创建一个链接创建一个标签 然后可以多次使用了 举个例子<br>   首先创建 [link]: <a class="link"   href="https://www.w3school.com.cn/" >https://www.w3school.com.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  注意有： 且有一个空格</p>
</li>
</ol>
<p>   <a class="link"   href="https://www.w3school.com.cn/" >我将进行第一次引用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>   用法格式 [显示文字][标签名]</p>
<ol>
<li><h4 id="图片的使用"><a href="#图片的使用" class="headerlink" title="图片的使用"></a>图片的使用</h4><ol>
<li><p>格式 ！[这是图片](本地地址 “图片标题”)</p>
</li>
<li><p>带有链接的图片 ！[[这是一个图片](本地地址)](链接) 地址可以是url 注意两个[[]]</p>
</li>
<li><p>举个例子 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/jiaj.jpg"
                      alt="My photo"
                >     </p>
</li>
<li><p><a href="https://www.w3school.com.cn/"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://th.bing.com/th/id/OIP.avb9nDfw3kq7NOoP0grM4wHaEK?w=282&h=180&c=7&r=0&o=5&dpr=1.3&pid=1.7"
                      alt="My photo"
                ></a></p>
<ol>
<li><h4 id="文字与背景颜色"><a href="#文字与背景颜色" class="headerlink" title="文字与背景颜色"></a>文字与背景颜色</h4></li>
</ol>
</li>
<li><p>文字颜色 支持十六进制颜色表示</p>
</li>
</ol>
</li>
<li><p>举个例子  &lt;font color &#x3D; Blue&gt;Text&lt;&#x2F;font&gt;<br> <font color = gree>hiiii</font><br> <font color = #f0f000>hiii</font><br> &#x2F;十六进制颜色是#开头 然后六位十六进制的数字 然后 顺序是RGB 255 是最多<br> <font color = #f0005>让我们看看这个颜色</font><br> 但是其实内置了很多 颜色 举个例子 seagreen seablue<br> <font color= seagreen>let me check it </font><br>     <font color= seablue>let me check it </font>  </p>
<ol start="3">
<li><em>背景颜色</em></li>
</ol>
<p>&lt;font style&#x3D;background:颜色&gt; </font>       </p>
<p> 举个例子<br>     <font style =background:seagreen>hello world  你好 世界</font></p>
</li>
</ol>
<p>​<br>​<br>2. ## 工具推荐与使用<br>    1. ### Vscode &amp; 相关 的插件<br>        很方便的一点就是可以瞬时查看自己的样式 并且标准与github一致<br>    2. ### Typora<br>        确实就很好了 可以通过选项 而不用在意源码 了 相当于提供了一个GUI</p>
<ol start="3">
<li><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2></li>
</ol>
<blockquote>
<p>目前所需的Markdown语法大概如此至于与Latex和HTML相关的由于使用较少，暂未提及，以后遇到再作更新学习</p>
</blockquote>
]]></content>
      <tags>
        <tag>MARKDOWN</tag>
      </tags>
  </entry>
  <entry>
    <title>Winter&#39;s blog</title>
    <url>/2023/03/16/Winter-s-blog/</url>
    <content><![CDATA[<h2 id="For-Ms-Winter"><a href="#For-Ms-Winter" class="headerlink" title="For Ms.Winter"></a>For Ms.Winter</h2><h3 id="先记录一下一个找图片地址的好地方-进入NASA官网直接copy-image-address-也可以在google里面使用-但是可能无法成功"><a href="#先记录一下一个找图片地址的好地方-进入NASA官网直接copy-image-address-也可以在google里面使用-但是可能无法成功" class="headerlink" title="先记录一下一个找图片地址的好地方 进入NASA官网直接copy image address 也可以在google里面使用 但是可能无法成功"></a>先记录一下一个找图片地址的好地方 进入NASA官网直接copy image address 也可以在google里面使用 但是可能无法成功</h3>]]></content>
      <tags>
        <tag>Elements</tag>
      </tags>
  </entry>
  <entry>
    <title>单调栈</title>
    <url>/2023/03/16/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    <content><![CDATA[<h2 id="关于单调栈的一些东西"><a href="#关于单调栈的一些东西" class="headerlink" title="关于单调栈的一些东西"></a>关于单调栈的一些东西</h2><h3 id="单调栈模板"><a href="#单调栈模板" class="headerlink" title="单调栈模板"></a>单调栈模板</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3000010</span>;</span><br><span class="line"><span class="type">int</span> a[N],f[N];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt;s;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(!s.<span class="built_in">empty</span>()&amp;&amp;a[s.<span class="built_in">top</span>()]&lt;=a[i])</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        f[i]=s.<span class="built_in">empty</span>()?<span class="number">0</span>:s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,f[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrape</title>
    <url>/2023/03/22/Scrape/</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本文使用的颜色较多，开启夜间模式阅读效果更好</p>
</blockquote>
<hr>
<h2 id="本系列主要是对阅读了python网络编程相关的总结与回顾"><a href="#本系列主要是对阅读了python网络编程相关的总结与回顾" class="headerlink" title="本系列主要是对阅读了python网络编程相关的总结与回顾"></a>本系列主要是对阅读了python网络编程相关的总结与回顾</h2><ol>
<li><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><ol>
<li><h4 id="http简介"><a href="#http简介" class="headerlink" title="http简介"></a><strong>http简介</strong></h4>  <em><strong>url</strong></em> : 统一资源定位符  格式如下 []代表可省略<br> <font color=seablue>protocol :&#x2F;&#x2F;[username:password@] hostname[:port] &#x2F; path &#x2F; [;parameters][?query]#fragment  </font><br> <font color=yellow>protocol</font>  : 协议 主要有 http,https,ftp,sms,<br> <font color =red>username,password</font> : 主要ftp<br> <font color =green>hostname</font> ： 主机名也就是域名 也可以用DNS映射得到IP地址，有一级二级域名之分<br> <font color =brown>port</font> : 端口号 http默认是80 类似还有https 443 属于套接口<br> <font color='cayon'>path</font> : 路径 就是位于主机中的地址<br> <font color='purple'>parameters</font> : 附加信息 现在用的少了<br> <font color=gold>query</font>  : 查询，多个查询就用&amp;分开，GET请求参数里也有<br> <font color=#a34929>fragment</font> : 片段 资源的补充 似乎很少使用<br> <font style =background:seagreen>http基本转向https 基于SSL socket相关也是爬取的主要内容</font>  </li>
<li><h4 id="http请求过程"><a href="#http请求过程" class="headerlink" title="http请求过程"></a><strong>http请求过程</strong></h4> <u>使用F12 Network 监听 Ctrl+R </u><br> <font color=seaf>Status</font>    : 状态码就是404 403 200 类似的<br> <font color=gold>Initiator</font> : 请求源 标记请求是由哪个进程或对象发起的<br> <font color=chocolate>Request</font>请求方法 请求头 请求体<br> <font color = aqua>Request Method</font> ： 请求方法GET POST居多 还有PUT DELETE 很多<br> <font color=azure></font><br> <font color=darkblue></font><br> <font color=coroflowerblue></font><br> <font color=blueviolet></font><br> <font color=coral></font><br> <font color=darkBlue></font></li>
</ol>
</li>
</ol>
<p>​        </p>
]]></content>
      <tags>
        <tag>SCRAPE</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2023/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<blockquote>
<p>本来想要有条理一点，但是实在太多，所以就列举名词，作为条理了</p>
</blockquote>
<hr>
<h2 id="计算机网络常识"><a href="#计算机网络常识" class="headerlink" title="计算机网络常识"></a>计算机网络常识</h2><ul>
<li>名字解释  <ul>
<li>通信链路：指的就是些通信的物理媒介 同轴电缆 铜线 无线电频谱 光纤</li>
<li>分组交换机 packet switch 就是路由器 与链路层交换机</li>
<li>ISP 因特网服务提供商</li>
<li>TCP&#x2F;IP 主要协议</li>
<li>RFC 请求评论</li>
<li>网络边缘 高速宽带 数字用户线 电缆基础上使用的</li>
<li>上行下行速度</li>
<li>光纤到户</li>
<li>LAN局域网 无线局域网 基于IEEE 802. 11技术的无<br>线LAN接入,更通俗地称为WiFi</li>
<li>蜂窝移动网络</li>
<li>报文message</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>BFS&amp;DFS</title>
    <url>/2023/03/23/BFS-DFS/</url>
    <content><![CDATA[<h2 id="简单总结一下BFS与DFS在图中的实现"><a href="#简单总结一下BFS与DFS在图中的实现" class="headerlink" title="简单总结一下BFS与DFS在图中的实现"></a>简单总结一下BFS与DFS在图中的实现</h2><ul>
<li><h3 id="BFS-amp-DFS-in-C"><a href="#BFS-amp-DFS-in-C" class="headerlink" title="BFS&amp;DFS in C++"></a><strong>BFS&amp;DFS in C++</strong></h3>  <font color=aqua><em><strong>由于对class不熟，没有写成类，但是单独写了头文件，作为一个标准例子吧</strong></em></font><h4 id="这是头文件"><a href="#这是头文件" class="headerlink" title="这是头文件"></a>这是头文件</h4>  <div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************/</span><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \file   BFS.hpp</span></span><br><span class="line"><span class="comment"> * \brief  For Ms.Winter </span></span><br><span class="line"><span class="comment"> *  To demonstrate the BFS and DFS in graph </span></span><br><span class="line"><span class="comment"> * as well as wellas review the queue and graph</span></span><br><span class="line"><span class="comment"> * \author Winter</span></span><br><span class="line"><span class="comment"> * \date   March 2023</span></span><br><span class="line"><span class="comment"> *********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once		<span class="comment">/* Two lines just in case */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _BFS_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _BFS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>	</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Macro </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK	1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BAD	0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERFLOW	-1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INFEASIBLE	-2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MVNum	50	<span class="comment">// Maximum number of vertices</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE	100</span></span><br><span class="line"><span class="comment">//ADT</span></span><br><span class="line"><span class="keyword">using</span> Status = <span class="type">int</span>;</span><br><span class="line"><span class="keyword">using</span> Len = <span class="type">int</span>;		<span class="comment">//C++ version</span></span><br><span class="line"><span class="comment">// ALGraph</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ArcType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> OtherInfo;	<span class="comment">//Maybe the weight</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">anode</span> &#123;</span><br><span class="line">	<span class="type">int</span> adjvex;		<span class="comment">//the index of this node</span></span><br><span class="line">	OtherInfo info;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">anode</span>* next;</span><br><span class="line">&#125;Arcnode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">vnode</span> &#123;</span><br><span class="line">	VertexType data;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Arcnode</span>* firstarc;</span><br><span class="line">	<span class="comment">// struct Arcnode*antifirst;	the out degree</span></span><br><span class="line">&#125;Vnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Vnode AdjList[MVNum];	</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">	AdjList vertices;</span><br><span class="line">	<span class="type">int</span> vernum&#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">int</span> arcnum&#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;ALGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AMGraph</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">	VertexType vertices[MVNum];</span><br><span class="line">	ArcType arcs[MVNum][MVNum];</span><br><span class="line">	<span class="type">int</span> vernum&#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">int</span> arcnum&#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;AMGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Queue the Squeue and list queue</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">	ElemType* data;</span><br><span class="line">	<span class="type">int</span> front;</span><br><span class="line">	<span class="type">int</span> rear;</span><br><span class="line">&#125;SQueue;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">qnode</span> &#123;</span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">qnode</span>* next;</span><br><span class="line">&#125;Qnode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">	Qnode* front;</span><br><span class="line">	Qnode* rear;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// the external value we will use in the main.cpp</span></span><br><span class="line">Arcnode* static_ = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="type">bool</span> visited[MVNum];		<span class="comment">//BFS</span></span><br><span class="line"><span class="type">bool</span> Visited[MAXSIZE];		<span class="comment">//DFS</span></span><br><span class="line"><span class="comment">//static funcion </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span>	<span class="title">FirstAdjVex</span><span class="params">(<span class="type">const</span> ALGraph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!static_)</span><br><span class="line">		static_ = G.vertices[v].firstarc;</span><br><span class="line">	<span class="keyword">return</span> G.vertices[v].firstarc-&gt;adjvex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">NextAdjVex</span><span class="params">(<span class="type">const</span> ALGraph G, <span class="type">int</span> v, <span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!static_)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	static_ = static_-&gt;next;</span><br><span class="line">	<span class="keyword">if</span> (static_)</span><br><span class="line">		<span class="keyword">return</span> static_-&gt;adjvex;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Func</span></span><br><span class="line"><span class="function">Status <span class="title">InitQueue_S</span><span class="params">(SQueue&amp; Q)</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">QueueIsEmpty_S</span><span class="params">(<span class="type">const</span> SQueue&amp; Q)</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue_S</span><span class="params">(SQueue&amp; Q)</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">EnQueue_S</span><span class="params">(SQueue&amp; Q, ElemType add)</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">DeQueue_S</span><span class="params">(SQueue&amp; Q, ElemType&amp; del)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(Queue&amp; Q)</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">QueueIsEmpty</span><span class="params">(<span class="type">const</span> Queue&amp; Q)</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue</span><span class="params">(Queue&amp; Q)</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(Queue&amp; Q, ElemType add)</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(Queue&amp; Q, ElemType&amp;del)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(<span class="type">const</span> ALGraph&amp; G, <span class="type">int</span> v)</span></span>;	</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">const</span> AMGraph&amp; G, <span class="type">int</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="这是cpp文件"><a href="#这是cpp文件" class="headerlink" title="这是cpp文件"></a>这是cpp文件</h4>  <div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************/</span><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \file   BFS.cpp</span></span><br><span class="line"><span class="comment"> * \brief  For Ms.Winter</span></span><br><span class="line"><span class="comment"> *  21/3/2023</span></span><br><span class="line"><span class="comment"> * \author 86158</span></span><br><span class="line"><span class="comment"> * \date   March 2023</span></span><br><span class="line"><span class="comment"> *********************************************************************/</span></span><br><span class="line"><span class="comment">// ?Here we come the BFS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;BFS.hpp&quot;</span></span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">Status <span class="title">InitQueue_S</span><span class="params">(SQueue&amp; Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Q.data = (ElemType*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ElemType) * MVNum);</span><br><span class="line">	<span class="keyword">if</span> (!Q.data)</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue_S</span><span class="params">(SQueue&amp; Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">free</span>(Q.data);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueIsEmpty_S</span><span class="params">(<span class="type">const</span> SQueue&amp; Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Q.front == Q.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">EnQueue_S</span><span class="params">(SQueue&amp;Q,ElemType add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % MVNum == Q.front)</span><br><span class="line">		<span class="keyword">return</span> BAD;</span><br><span class="line">	Q.data[Q.rear] = add;</span><br><span class="line">	Q.rear = (Q.rear + <span class="number">1</span>) % MVNum;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeQueue_S</span><span class="params">(SQueue&amp; Q, <span class="type">int</span>&amp; del)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line">		<span class="keyword">return</span> BAD;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(Queue&amp; Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Qnode*pnew = (Qnode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Qnode));</span><br><span class="line">	<span class="keyword">if</span> (!pnew)</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	Q.front = Q.rear = pnew;</span><br><span class="line">	Q.front-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueIsEmpty</span><span class="params">(<span class="type">const</span> Queue&amp; Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Q.front == Q.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue</span><span class="params">(Queue&amp; Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Q.rear = Q.front;</span><br><span class="line">	<span class="keyword">while</span> (Q.front)</span><br><span class="line">	&#123;</span><br><span class="line">		Q.rear = Q.front-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(Q.front);</span><br><span class="line">		Q.front = Q.rear;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(Queue&amp; Q, ElemType add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Qnode* pnew = (Qnode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Qnode));</span><br><span class="line">	pnew-&gt;data = add;</span><br><span class="line">	pnew-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">	Q.rear-&gt;next = pnew;</span><br><span class="line">	Q.rear = pnew;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(Queue&amp; Q, ElemType&amp; del)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line">		<span class="keyword">return</span> BAD;</span><br><span class="line">	Qnode* psave = Q.front-&gt;next;</span><br><span class="line">	del = psave-&gt;data;</span><br><span class="line">	Q.front-&gt;next = psave-&gt;next;</span><br><span class="line">	<span class="keyword">if</span> (Q.rear == psave)</span><br><span class="line">		Q.rear = Q.front;</span><br><span class="line">	<span class="built_in">free</span>(psave);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(<span class="type">const</span> ALGraph&amp; G, <span class="type">int</span> v)</span>	<span class="comment">//? v the start of the BFS</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Queue vessel;</span><br><span class="line">	<span class="built_in">InitQueue</span>(vessel);</span><br><span class="line">	cout &lt;&lt; G.vertices[v].data;</span><br><span class="line">	visited[v] = <span class="literal">true</span>;</span><br><span class="line">	<span class="built_in">EnQueue</span>(vessel, v);</span><br><span class="line">	<span class="type">int</span> u&#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">QueueIsEmpty</span>(vessel))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">DeQueue</span>(vessel, u);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> w = <span class="built_in">FirstAdjVex</span>(G, u); w &gt;= <span class="number">0</span>; w = <span class="built_in">NextAdjVex</span>(G, u, w))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!visited[w])</span><br><span class="line">			&#123;</span><br><span class="line">				visited[w] = <span class="literal">true</span>;</span><br><span class="line">				cout &lt;&lt; G.vertices[w].data;</span><br><span class="line">				<span class="built_in">EnQueue</span>(vessel, w);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">const</span> AMGraph&amp; G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= G.vernum)</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	cout &lt;&lt; G.vertices[v];</span><br><span class="line">	Visited[v] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt; G.vernum; ++w)</span><br><span class="line">		<span class="keyword">if</span> (G.arcs[v][w] &amp;&amp; !Visited[w])</span><br><span class="line">			<span class="built_in">DFS</span>(G, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//inline int FirstAdjvex(const ALGraph&amp; G, int v)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	if (!static_)</span></span><br><span class="line"><span class="comment">//		static_ = G.vertices[v].firstarc;</span></span><br><span class="line"><span class="comment">//	return G.vertices[v].firstarc-&gt;adjvex;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//inline int NextAdjvex(const ALGraph&amp; G, int v, int u)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	ArcNode* scan;</span></span><br><span class="line"><span class="comment">//	for (scan = G.vertices[v].firstarc; scan-&gt;adjvex != u &amp;&amp; !scan-&gt;next; scan = scan-&gt;next)</span></span><br><span class="line"><span class="comment">//		continue;</span></span><br><span class="line"><span class="comment">//	if (u == scan-&gt;adjvex &amp;&amp; !scan-&gt;next)</span></span><br><span class="line"><span class="comment">//		return scan-&gt;next-&gt;adjvex;</span></span><br><span class="line"><span class="comment">//	return -1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//// ?May I create the new writing</span></span><br><span class="line"><span class="comment">//inline int NextNeighbor(const ALGraph&amp; G,int v)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	if (!static_||!static_-&gt;next)</span></span><br><span class="line"><span class="comment">//		return -1;</span></span><br><span class="line"><span class="comment">//	static_=static_-&gt;next;</span></span><br><span class="line"><span class="comment">//	return static_-&gt;adjvex;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Macro</span></span><br><span class="line"><span class="comment">//#define MVNum	50</span></span><br><span class="line"><span class="comment">//#define OK	1</span></span><br><span class="line"><span class="comment">//#define BAD	0</span></span><br><span class="line"><span class="comment">////</span></span><br><span class="line"><span class="comment">//using Status = int;</span></span><br><span class="line"><span class="comment">//using VertexType = char;</span></span><br><span class="line"><span class="comment">//using ArcType = int;</span></span><br><span class="line"><span class="comment">//using Len = int;</span></span><br><span class="line"><span class="comment">//// the adjency list</span></span><br><span class="line"><span class="comment">//typedef struct anode&#123;</span></span><br><span class="line"><span class="comment">//	int adjvex;</span></span><br><span class="line"><span class="comment">//	ArcType info;</span></span><br><span class="line"><span class="comment">//	struct anode* next;</span></span><br><span class="line"><span class="comment">//&#125;ArcNode;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//typedef struct vnode &#123;</span></span><br><span class="line"><span class="comment">//	VertexType data&#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//	ArcNode* firstarc;	//?there we don&#x27;t care the out degree</span></span><br><span class="line"><span class="comment">//&#125;Vnode;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//typedef Vnode AdjList[MVNum];	// ? Very special !!!</span></span><br><span class="line"><span class="comment">//typedef struct &#123;</span></span><br><span class="line"><span class="comment">//	AdjList vertices;</span></span><br><span class="line"><span class="comment">//	int vertexnum&#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//	int arcnum&#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//&#125;ALGraph;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////? we just can handle the adjlist like list and insert </span></span><br><span class="line"><span class="comment">//// ? from the head of the list!!!</span></span><br><span class="line"><span class="comment">////we will use the queue</span></span><br><span class="line"><span class="comment">//typedef int ElemType;		// just to store the index of the vex</span></span><br><span class="line"><span class="comment">//typedef struct &#123;</span></span><br><span class="line"><span class="comment">//	ElemType* data;</span></span><br><span class="line"><span class="comment">//	int front&#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//	int rear&#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//&#125;SQueue;</span></span><br><span class="line"><span class="comment">//// the loop queue</span></span><br></pre></td></tr></table></figure></div></li>
<li><h3 id="BFS-in-Python"><a href="#BFS-in-Python" class="headerlink" title="BFS in Python"></a>BFS in Python</h3></li>
</ul>
<p>		<br> 然后写了一个在python中BFS实现 主要用python可以省略一些细节而着重于思想理解</p>
  <div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#BFS in python</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque   <span class="comment"># double queue</span></span><br><span class="line">graph=&#123;&#125;</span><br><span class="line">graph[<span class="string">&quot;you&quot;</span>] = [<span class="string">&quot;alice&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;claire&quot;</span>] </span><br><span class="line">graph[<span class="string">&quot;bob&quot;</span>] = [<span class="string">&quot;anuj&quot;</span>, <span class="string">&quot;peggy&quot;</span>] </span><br><span class="line">graph[<span class="string">&quot;alice&quot;</span>] = [<span class="string">&quot;peggy&quot;</span>] </span><br><span class="line">graph[<span class="string">&quot;claire&quot;</span>] = [<span class="string">&quot;thom&quot;</span>, <span class="string">&quot;jonny&quot;</span>] </span><br><span class="line">graph[<span class="string">&quot;anuj&quot;</span>] = [] </span><br><span class="line">graph[<span class="string">&quot;peggy&quot;</span>] = [] </span><br><span class="line">graph[<span class="string">&quot;thom&quot;</span>] = [] </span><br><span class="line">graph[<span class="string">&quot;jonny&quot;</span>] = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person_is_seller</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> name[-<span class="number">1</span>]==<span class="string">&#x27;m&#x27;</span>        <span class="comment">#just give an example</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">graph,name</span>):       <span class="comment">#we start from this guy</span></span><br><span class="line">    search_queue=deque()</span><br><span class="line">    search_queue+=graph[name]</span><br><span class="line">    searched=[]</span><br><span class="line">    <span class="keyword">while</span> search_queue:     <span class="comment">#not null</span></span><br><span class="line">        person=search_queue.popleft()</span><br><span class="line">        <span class="keyword">if</span> person <span class="keyword">not</span> <span class="keyword">in</span> searched:</span><br><span class="line">            <span class="keyword">if</span> person_is_seller(person):</span><br><span class="line">                <span class="built_in">print</span>(person+<span class="string">&#x27; is a wolfman&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                search_queue+=graph[person]</span><br><span class="line">                search.append(person)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><h2 id="总结思路"><a href="#总结思路" class="headerlink" title="总结思路"></a>总结思路</h2></li>
</ul>
<p><strong><font color=seagreen>BFS主要应用了队列的思想 DFS主要运用了递归的思想 最终图的表示使用了离散数学的邻接矩阵于邻接表  Done!</font></strong></p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS</title>
    <url>/2023/03/23/DNS/</url>
    <content><![CDATA[<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><ul>
<li><h3 id="DNS-Domain-name-system"><a href="#DNS-Domain-name-system" class="headerlink" title="DNS(Domain name system)"></a>DNS(Domain name system)</h3><ul>
<li><p>是DNS服务器实现的一个分布式数据库，同时也算是一个应用层协议运行在unix机器之上，端口号为53</p>
</li>
<li><p>http、smtp、ftp都是用了DNS将主机名转化为IP地址</p>
</li>
<li><p>原理如下</p>
<p>1） 同一台用户主机上运行着DNS应用的客户端。</p>
<p>2） 浏览器从上述URL中抽取岀主机名<a class="link"   href="http://www.baidu.com,并将这台主机名传给dns应用的客户端./" >www.baidu.com,并将这台主机名传给DNS应用的客户端。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>3） DNS客户向DNS服务器发送一个包含主机名的请求。</p>
<p>4） DNS客户最终会收到一份回答报文，其中含有对应于该主机名的IP地址。</p>
<p>5） 一旦浏览器接收到来自DNS的该IP地址，它能够向位于该IP地址80端口的HTTP服务器进程发起一个TCP连接。		</p>
</li>
<li><p>规范主机名与主机别名，邮件系统别名联想自己的学校邮箱</p>
</li>
</ul>
</li>
<li><h3 id="DNS工作原理"><a href="#DNS工作原理" class="headerlink" title="DNS工作原理"></a>DNS工作原理</h3><ul>
<li><p>主机例如web应用需要将主机名转换为IP地址时，调用DNS客户端，指明主机名，底层的unix实现是调用一个函数gethostbtname（）</p>
</li>
<li><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li><h5 id="分布式，层次"><a href="#分布式，层次" class="headerlink" title="分布式，层次"></a>分布式，层次</h5><p>根，顶级域(TLD，top-level domain),权威，三层。举个例子</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/DNS%E5%B1%82%E6%AC%A1.png"
                      alt="DNS层次"
                ></p>
<p>国家，fr,jp,ca,也是自己国家维护的顶级域 权威顶级域就是因特网上能够被公共访问的服务器主机需要提供的一个可公共访问的DNS记录，例如大学，自己维护的DNS服务器</p>
</li>
<li><h5 id="本地DNS服务器与缓存"><a href="#本地DNS服务器与缓存" class="headerlink" title="本地DNS服务器与缓存"></a>本地DNS服务器与缓存</h5><p>通过本地公用来减少流量，缓存可以减少路径，尽量绕过根DNS</p>
</li>
</ul>
</li>
<li><h4 id="DNS记录与报文"><a href="#DNS记录与报文" class="headerlink" title="DNS记录与报文"></a>DNS记录与报文</h4><ul>
<li><h5 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h5></li>
</ul>
<p>DNS服务器中提供了资源记录，包含四元组(Name, Value，Type，TTL) </p>
<p>如果Type &#x3D; A,则Name是主机名，Value是该主机名对应的IP地址。因此，一条类型为A的资源记录提供了标准的主机名到IP地址的映射。例如(Tayl.bar. foo. com, 145. 37.93. 126, A)就是一条类型 A 记录。</p>
<p>如果Type &#x3D; NS,则Name是个域(如foo. com),而Value是个知道如何获得该域中主机IP地址的权威DNS服务器的主机名。这个记录用于沿着查询链来路由DNS查询。例如(fgcom, cins.foo.com, NS)就是一条类型为NS的记录。</p>
<p>如果Type&#x3D;CNAME，则 Value是别名为Name的主机对应的规范主机名。该记录能够向査询的主机提供一个主机名对应的规范主机名，例如(foo.com, relay1.bar. foo. com, CNAME)就是一条 CNAME 类型的记录。</p>
<p>如果Type &#x3D; MX,则Value是个别名为Name的邮件服务器的规范主机名。举例来说，(foo.com, mail. bar. fo&lt;). com, MX)就是一条MX记录。MX记录允许邮件服务器主机名具有简单的别名。值得注意的是，通过使用MX记录，一个公司的邮件服务器和其他服务器(如它的Web服务器)可以使用相同的别名。为了获得邮件服务器的规范主机名，DNS客户应当请求一条MX记录；而为了获得其他服务器的规范主机名，DNS客户应当请求CNAME记录</p>
<ul>
<li><h5 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h5><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/DNS%E6%8A%A5%E6%96%87.png"
                      alt="DNS报文" title="DNS报文"
                ></li>
</ul>
<p>控制台键入nslookup 即可看权威DNS服务器与地址 dns.hust.edu.cn</p>
</li>
</ul>
</li>
</ul>
<h2 id="P2P与BitTorrent"><a href="#P2P与BitTorrent" class="headerlink" title="P2P与BitTorrent"></a>P2P与BitTorrent</h2><p>​	之前都是采用客户-服务器体系结构，依赖于服务器，P2P则是最小或是没有依赖。成对间歇连接的主机直接相连，对等方。最广泛的是BitTorrent协议</p>
<ul>
<li><h3 id="P2P体系结构的拓展性"><a href="#P2P体系结构的拓展性" class="headerlink" title="P2P体系结构的拓展性"></a>P2P体系结构的拓展性</h3><p>在用户接受到后能够使用自己的能力进行一个上传。</p>
</li>
<li><h3 id="BitTorrent-协议"><a href="#BitTorrent-协议" class="headerlink" title="BitTorrent 协议"></a>BitTorrent 协议</h3><p>洪流，主机集合，可以一起向其他主机传输，用追踪器实现。传送时，遵循一定的最有算法。</p>
</li>
</ul>
<h2 id="视频流"><a href="#视频流" class="headerlink" title="视频流"></a>视频流</h2><ul>
<li><h3 id="http流与DASH"><a href="#http流与DASH" class="headerlink" title="http流与DASH"></a>http流与DASH</h3><p>http流中的视频就是一个普通的http下的文件具有一个url。初期，由于具有统一格式，提供单一视频的性质，现在，为经HTTP的动态适应性流(Dynamic AdaptiveStreaming over HTTP, DASH) ，编码不同版本，不同画质。</p>
<ul>
<li><h4 id="内容发布网"><a href="#内容发布网" class="headerlink" title="内容发布网"></a>内容发布网</h4>CDN，在传统的DNS访问中，最后得到的是一个CDN内容服务器IP地址，然后再CDN中处理</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
</search>
